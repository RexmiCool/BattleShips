@page "/game"
@inject HttpClient Http
@inject GameState GameState

<h3>BattleShip Game</h3>

@if (!gameStarted)
{
    <h4>Choisir la difficulté et la taille de la grille :</h4>
    <div>
        <label for="difficulty">Difficulté :</label>
        <select @bind="selectedDifficulty">
            <option value="1">Facile</option>
            <option value="2">Moyen</option>
            <option value="3">Difficile</option>
        </select>
    </div>

    <div>
        <label for="gridSize">Taille de la grille :</label>
        <select @bind="selectedGridSize">
            <option value="5">5x5</option>
            <option value="10">10x10</option>
            <option value="15">15x15</option>
        </select>
    </div>

    <button @onclick="() => StartNewGame(selectedDifficulty, selectedGridSize)">Démarrer une nouvelle partie</button>
}
else
{
    <div class="game-container">
        <div class="grid-container">
            <h4>Grille du Joueur</h4>
            <table>
                @for (int row = 0; row < GameState.PlayerGrid.GetLength(0); row++)
                {
                    <tr>
                        @for (int col = 0; col < GameState.PlayerGrid.GetLength(1); col++)
                        {
                            <td>
                                @if (char.IsLetter(GameState.PlayerGrid[row, col]))  // Si un bateau est présent
                                {
                                    <span>@GameState.PlayerGrid[row, col]</span>
                                    // Affiche le caractère du bateau
                                }
                                else
                                {
                                    <span>~</span> <!-- Vide si pas de bateau -->
                                }
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>

        <div class="grid-container">
            <h4>Grille de l'Adversaire</h4>
            <table>
                @for (int row = 0; row < GameState.OpponentGrid.GetLength(0); row++)
                {
                    <tr>
                        @for (int col = 0; col < GameState.OpponentGrid.GetLength(1); col++)
                        {
                            var currentRow = row;  // Capture la valeur actuelle de row
                            var currentCol = col;  // Capture la valeur actuelle de col
                            <td>
                                @if (GameState.OpponentGrid[currentRow, currentCol] == true)
                                {
                                    <img src="images/hit.png" alt="Touché" />
                                }
                                else if (GameState.OpponentGrid[currentRow, currentCol] == false)
                                {
                                    <img src="images/miss.png" alt="Raté" />
                                }
                                else
                                {
                                    <button @onclick="() => PlayMove(GameState.GameId, currentRow, currentCol)">?</button> <!-- Case cliquable -->
                                }
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(GameState.Message))
    {
        <div class="alert alert-success">@GameState.Message</div>
    }
}

@code {
    private bool gameStarted = false;
    private int selectedDifficulty = 1;
    private int selectedGridSize = 10;

    private async Task StartNewGame(int difficulty, int gridSize)
    {
        var request = new RestartGameRequest { difficulty = difficulty, gridSize = gridSize };
        var response = await Http.PostAsJsonAsync("game/new", request);

        if (response.IsSuccessStatusCode)
        {
            var gameResponse = await response.Content.ReadFromJsonAsync<GameResponse>();

            if (gameResponse != null)
            {
                gameStarted = true;
                GameState.GameId = gameResponse.gameId;

                // Initialiser la grille du joueur avec les bateaux
                foreach (var boat in gameResponse.boatLocations)
                {
                    foreach (var part in boat.Value)
                    {
                        int row = part[0];
                        int col = part[1];
                        GameState.PlayerGrid[row, col] = boat.Key;  // Utilise le caractère du bateau
                    }
                }

                // Réinitialiser la grille de l'adversaire
                for (int row = 0; row < GameState.OpponentGrid.GetLength(0); row++)
                {
                    for (int col = 0; col < GameState.OpponentGrid.GetLength(1); col++)
                    {
                        GameState.OpponentGrid[row, col] = null;
                    }
                }
            }
        }
        else
        {
            GameState.Message = "Erreur lors de la création de la partie.";
        }
    }

    private async Task PlayMove(int gameId, int row, int col)
    {
        var attackRequest = new AttackRequest(gameId, row, col);
        var response = await Http.PostAsJsonAsync("/game/attack", attackRequest);

        // Lire le contenu brut de la réponse pour le débogage
        var rawContent = await response.Content.ReadAsStringAsync();
        Console.WriteLine($"Raw response: {rawContent}");  // Affichez le contenu brut dans la console

        if (response.IsSuccessStatusCode)
        {
            var attackResponse = await response.Content.ReadFromJsonAsync<AttackResponse>();

            if (attackResponse.winner.HasValue)
            {
                GameState.Message = attackResponse.winner.Value == 1 ? "Vous avez gagné !" : "Vous avez perdu...";
            }

            // Mettez à jour la grille de l'adversaire
            GameState.OpponentGrid[row, col] = attackResponse.playerAttack == 1;

            // Mettez à jour la grille du joueur avec les résultats de l'attaque IA
            var botCoordinates = attackResponse.botAttackCoordinates;
            GameState.PlayerGrid[botCoordinates.row, botCoordinates.column] = attackResponse.botAttack == 1 ? 'X' : 'O';

            // Gestion des bateaux détruits
            if (attackResponse.destroyedBoatsCount != null)
            {
                foreach (var destroyedBoat in attackResponse.destroyedBoatsCount)
                {
                    // Ici, vous pouvez gérer l'affichage ou la logique en fonction des bateaux détruits
                    Console.WriteLine($"Bateau détruit : {destroyedBoat.Key}, Nombre: {destroyedBoat.Value}");
                }
            }
        }
        else
        {
            GameState.Message = "Erreur lors de la requête à l'API.";
        }
    }
}